"use strict";

/********* External Imports ********/

const { stringToBuffer, bufferToString, encodeBuffer, decodeBuffer, getRandomBytes } = require("./lib");
const { pbkdf2 } = require('crypto');


/********* Constants ********/

const PBKDF2_ITERATIONS = 100000; // number of iterations for PBKDF2 algorithm
const MAX_PASSWORD_LENGTH = 64;   // we can assume no password is longer than this many characters

/********* Implementation ********/

class Keychain {
  /**
   * Initializes the keychain using the provided information. Note that external
   * users should likely never invoke the constructor directly and instead use
   * either Keychain.init or Keychain.load. 
   * Arguments:
   *  You may design the constructor with any parameters you would like. 
   * Return Type: void
   */
  constructor(password, salt, iv, data) {
    this.password = password;
    this.salt = salt;
    this.iv = iv;
    this.data = data;

  };

  /** 
    * Creates an empty keychain with the given password.
    *
    * Arguments:
    *   password: string
    * Return Type: void
    */
  static async init(password) {
    const salt = getRandomBytes(16);
    const iv = getRandomBytes(16);
    const data = [];
    return new Keychain(password, salt, iv, data);
  }

  /**
    * Loads the keychain state from the provided representation (repr). The
    * repr variable will contain a JSON encoded serialization of the contents
    * of the KVS (as returned by the dump function). The trustedDataCheck
    * is an *optional* SHA-256 checksum that can be used to validate the 
    * integrity of the contents of the KVS. If the checksum is provided and the
    * integrity check fails, an exception should be thrown. You can assume that
    * the representation passed to load is well-formed (i.e., it will be
    * a valid JSON object).Returns a Keychain object that contains the data
    * from repr. 
    *
    * Arguments:
    *   password:           string
    *   repr:               string
    *   trustedDataCheck: string
    * Return Type: Keychain
    */
  static async load(password, repr, trustedDataCheck) {
    const { serializedData, checksum} = JSON.parse(repr);
    const isValid = checksum === trustedDataCheck;
    if (!isValid) {
      throw new Error("Data integrity check failed");
    }
    const { salt, iv, data } = serializedData;
    return new Keychain(password, Buffer.from(salt, 'base64'), Buffer.from(iv, 'base64'), data);
  };

  /**
    * Returns a JSON serialization of the contents of the keychain that can be 
    * loaded back using the load function. The return value should consist of
    * an array of two strings:
    *   arr[0] = JSON encoding of password manager
    *   arr[1] = SHA-256 checksum (as a string)
    * As discussed in the handout, the first element of the array should contain
    * all of the data in the password manager. The second element is a SHA-256
    * checksum computed over the password manager to preserve integrity.
    *
    * Return Type: array
    */ 
  async dump() {
    const serializedData = JSON.stringify({ salt: this.salt.toString('base64'), iv: this.iv.toString('base64'), data: this.data, kvs: this.data });
    const checksum = await this.computeChecksum(serializedData);
    return [serializedData, checksum];
  }
  

  async computeChecksum(data) {
    const { createHash } = require('crypto');
    const hash = createHash('sha256');
    hash.update(data);
    return hash.digest('base64');
  }

  /**
    * Fetches the data (as a string) corresponding to the given domain from the KVS.
    * If there is no entry in the KVS that matches the given domain, then return
    * null.
    *
    * Arguments:
    *   name: string
    * Return Type: Promise<string>
    */
  async get(name) {
    return this.data[name] || null;
  };

  /** 
  * Inserts the domain and associated data into the KVS. If the domain is
  * already in the password manager, this method should update its value. If
  * not, create a new entry in the password manager.
  *
  * Arguments:
  *   name: string
  *   value: string
  * Return Type: void
  */
  async set(name, value) {
    this.data[name] = value;
  };

  /**
    * Removes the record with name from the password manager. Returns true
    * if the record with the specified name is removed, false otherwise.
    *
    * Arguments:
    *   name: string
    * Return Type: Promise<boolean>
  */
  async remove(name) {
    if (this.data[name]) {
      delete this.data[name];
      return true;
    }
    return false;
  };
};

module.exports = { Keychain };


##############################################################################################################################

"use strict";

/********* External Imports ********/

const { stringToBuffer, bufferToString, encodeBuffer, decodeBuffer, getRandomBytes } = require("./lib");
const { pbkdf2 } = require('crypto');


/********* Constants ********/

const PBKDF2_ITERATIONS = 100000; // number of iterations for PBKDF2 algorithm
const MAX_PASSWORD_LENGTH = 64;   // we can assume no password is longer than this many characters

/********* Implementation ********/

class Keychain {
  /**
   * Initializes the keychain using the provided information. Note that external
   * users should likely never invoke the constructor directly and instead use
   * either Keychain.init or Keychain.load. 
   * Arguments:
   *  You may design the constructor with any parameters you would like. 
   * Return Type: void
   */
  constructor(password, salt, iv, data) {
    this.password = password;
    this.salt = salt;
    this.iv = iv;
    this.data = data;

  };

  /** 
    * Creates an empty keychain with the given password.
    *
    * Arguments:
    *   password: string
    * Return Type: void
    */
  static async init(password) {
    const salt = getRandomBytes(16);
    const iv = getRandomBytes(16);
    const data = [];
    return new Keychain(password, salt, iv, data);
  }

  /**
    * Loads the keychain state from the provided representation (repr). The
    * repr variable will contain a JSON encoded serialization of the contents
    * of the KVS (as returned by the dump function). The trustedDataCheck
    * is an *optional* SHA-256 checksum that can be used to validate the 
    * integrity of the contents of the KVS. If the checksum is provided and the
    * integrity check fails, an exception should be thrown. You can assume that
    * the representation passed to load is well-formed (i.e., it will be
    * a valid JSON object).Returns a Keychain object that contains the data
    * from repr. 
    *
    * Arguments:
    *   password:           string
    *   repr:               string
    *   trustedDataCheck: string
    * Return Type: Keychain
    */
  static async load(password, repr, trustedDataCheck) {
    const serializedData = repr[0];
    const checksum = repr[1];
    const isValid = checksum === trustedDataCheck;
    if (!isValid) {
      throw new Error("Data integrity check failed");
    }
    const [ salt, iv, data ] = JSON.parse(serializedData);
    return new Keychain(password, Buffer.from(salt, 'base64'), Buffer.from(iv, 'base64'), data);
  }

  /**
    * Returns a JSON serialization of the contents of the keychain that can be 
    * loaded back using the load function. The return value should consist of
    * an array of two strings:
    *   arr[0] = JSON encoding of password manager
    *   arr[1] = SHA-256 checksum (as a string)
    * As discussed in the handout, the first element of the array should contain
    * all of the data in the password manager. The second element is a SHA-256
    * checksum computed over the password manager to preserve integrity.
    *
    * Return Type: array
    */ 
  async dump() {
    const serializedData = JSON.stringify({ salt: this.salt.toString('base64'), iv: this.iv.toString('base64'), data: this.data });
    const checksum = await this.computeChecksum(serializedData);
    console.log('dump serializedData:', serializedData);
    console.log('dump checksum:', checksum);
    return [serializedData, checksum];
  }
  

  async computeChecksum(data) {
    const { createHash } = require('crypto');
    const hash = createHash('sha256');
    hash.update(data);
    return hash.digest('base64');
  }

  /**
    * Fetches the data (as a string) corresponding to the given domain from the KVS.
    * If there is no entry in the KVS that matches the given domain, then return
    * null.
    *
    * Arguments:
    *   name: string
    * Return Type: Promise<string>
    */
  async get(name) {
    return this.data[name] || null;
  };

  /** 
  * Inserts the domain and associated data into the KVS. If the domain is
  * already in the password manager, this method should update its value. If
  * not, create a new entry in the password manager.
  *
  * Arguments:
  *   name: string
  *   value: string
  * Return Type: void
  */
  async set(name, value) {
    this.data[name] = value;
  };

  /**
    * Removes the record with name from the password manager. Returns true
    * if the record with the specified name is removed, false otherwise.
    *
    * Arguments:
    *   name: string
    * Return Type: Promise<boolean>
  */
  async remove(name) {
    if (this.data[name]) {
      delete this.data[name];
      return true;
    }
    return false;
  };
};

module.exports = { Keychain };

###################################################################################################
"use strict";

/********* External Imports ********/

const { stringToBuffer, bufferToString, encodeBuffer, decodeBuffer, getRandomBytes } = require("./lib");
const { pbkdf2 } = require('crypto');
const crypto = require('crypto');

/********* Constants ********/

const PBKDF2_ITERATIONS = 100000; // number of iterations for PBKDF2 algorithm
const MAX_PASSWORD_LENGTH = 64;   // we can assume no password is longer than this many characters

/********* Implementation ********/
class Keychain {
  /**
   * Initializes the keychain using the provided information. Note that external
   * users should likely never invoke the constructor directly and instead use
   * either Keychain.init or Keychain.load. 
   * Arguments:
   *  You may design the constructor with any parameters you would like. 
   * Return Type: void
   */
  constructor(password) {
    if (typeof password !== 'string') {
      throw new TypeError('Password must be a string');
    }

    this.data = {};
    this.secrets = {};
  
    // Generate a random salt and initialization vector
    this.salt = crypto.randomBytes(16);
    this.iv = crypto.randomBytes(16);
  
    // Derive a key from the password
    this.key = crypto.pbkdf2Sync(password, this.salt, PBKDF2_ITERATIONS, 32, 'sha256');
  }

  /** 
    * Creates an empty keychain with the given password.
    *
    * Arguments:
    *   password: string
    * Return Type: void
    */
  static async init(password) {
    if (password.length > MAX_PASSWORD_LENGTH) {
      throw new Error('Password length exceeds the maximum allowed length');
    }

    if (typeof password !== 'string') {
      throw new TypeError('Password must be a string');
    }
  
    const keychain = new Keychain(password);
    return keychain;
  }

  /**
    * Loads the keychain state from the provided representation (repr). The
    * repr variable will contain a JSON encoded serialization of the contents
    * of the KVS (as returned by the dump function). The trustedDataCheck
    * is an *optional* SHA-256 checksum that can be used to validate the 
    * integrity of the contents of the KVS. If the checksum is provided and the
    * integrity check fails, an exception should be thrown. You can assume that
    * the representation passed to load is well-formed (i.e., it will be
    * a valid JSON object).Returns a Keychain object that contains the data
    * from repr. 
    *
    * Arguments:
    *   password:           string
    *   repr:               string
    *   trustedDataCheck: string
    * Return Type: Keychain
    */

  
  static async load(password, repr, trustedDataCheck) {
    const { salt, iv, data: encryptedData } = JSON.parse(repr);
  
    const derivedKey = await new Promise((resolve, reject) => {
      pbkdf2(password, salt, PBKDF2_ITERATIONS, 32, 'sha256', (err, key) => {
        if (err) {
          reject(err);
        } else {
          resolve(key);
        }
      });
    });
  
    const decipher = crypto.createDecipheriv('aes-256-cbc', derivedKey, Buffer.from(iv, 'hex'));
    let decryptedData = decipher.update(encryptedData, 'hex', 'utf8');
    decryptedData += decipher.final('utf8');
  
    const data = JSON.parse(decryptedData);
  
    const checksum = crypto.createHash('sha256').update(repr).digest('hex');
    if (trustedDataCheck && checksum !== trustedDataCheck) {
      throw new Error('Data integrity check failed');
    }
  
    const keychain = new Keychain(data);
    keychain.key = derivedKey;
    keychain.salt = salt;
    keychain.iv = iv;
  
    return keychain;
  }

  /**
    * Returns a JSON serialization of the contents of the keychain that can be 
    * loaded back using the load function. The return value should consist of
    * an array of two strings:
    *   arr[0] = JSON encoding of password manager
    *   arr[1] = SHA-256 checksum (as a string)
    * As discussed in the handout, the first element of the array should contain
    * all of the data in the password manager. The second element is a SHA-256
    * checksum computed over the password manager to preserve integrity.
    *
    * Return Type: array
    */ 
  async dump() {
    const { salt, iv, data } = this;
  
    // Create a cipher using 'aes-256-gcm' algorithm, this.key and this.iv
    const cipher = crypto.createCipheriv('aes-256-gcm', this.key, this.iv);
    let encryptedData = cipher.update(JSON.stringify(data), 'utf8', 'hex');
    encryptedData += cipher.final('hex');
  
    const serializedData = JSON.stringify({ salt: salt.toString('hex'), iv: iv.toString('hex'), data: encryptedData });
  
    // Compute a SHA-256 hash of the serializedData
    const hash = crypto.createHash('sha256');
    hash.update(serializedData);
    const checksum = hash.digest('hex');
  
    return [serializedData, checksum];
  }
async computeChecksum(data) {
    const { createHash } = require('crypto');
    const hash = createHash('sha256');
    hash.update(data);
    return hash.digest('base64');
  }

  /**
    * Fetches the data (as a string) corresponding to the given domain from the KVS.
    * If there is no entry in the KVS that matches the given domain, then return
    * null.
    *
    * Arguments:
    *   name: string
    * Return Type: Promise<string>
    */
  async get(name) {
    // Convert name to Base64 encoded string
    const nameBase64 = encodeBuffer(stringToBuffer(name));

    const valueBase64 = this.data[nameBase64];
    return valueBase64 !== undefined ? bufferToString(decodeBuffer(valueBase64)) : null;
  }

  /** 
  * Inserts the domain and associated data into the KVS. If the domain is
  * already in the password manager, this method should update its value. If
  * not, create a new entry in the password manager.
  *
  * Arguments:
  *   name: string
  *   value: string
  * Return Type: void
  */
  async set(name, value) {
    // Convert name and value to Base64 encoded strings
    const nameBase64 = encodeBuffer(stringToBuffer(name));
    const valueBase64 = encodeBuffer(stringToBuffer(value));

    this.data[nameBase64] = valueBase64;
  }

  /**
    * Removes the record with name from the password manager. Returns true
    * if the record with the specified name is removed, false otherwise.
    *
    * Arguments:
    *   name: string
    * Return Type: Promise<boolean>
  */
  async remove(name) {
    // Convert name to Base64 encoded string
    const nameBase64 = encodeBuffer(stringToBuffer(name));

    if (this.data[nameBase64] !== undefined) {
      delete this.data[nameBase64];
      return true;
    } else {
      return false;
    }
  }

};
module.exports = { Keychain };


